import React, { useState, useCallback, useEffect } from 'react';
import { CheckCircle, XCircle, RefreshCw, Menu, X, ChevronDown, ChevronUp, Loader, Zap, BookOpen } from 'lucide-react';

const allQuestions = [
  {
    type: "multiple_choice",
    question: "How many articles are in the original U.S. Constitution?",
    options: ["5", "7", "10", "12"],
    correctIndex: 1,
    explanation: "The Constitution contains 7 articles that establish the framework of government."
  },
  {
    type: "multiple_choice",
    question: "Which article establishes the Legislative Branch?",
    options: ["Article I", "Article II", "Article III", "Article IV"],
    correctIndex: 0,
    explanation: "Article I establishes Congress and defines its powers."
  },
  {
    type: "true_false",
    question: "Each state has two senators regardless of population.",
    options: ["True", "False"],
    correctIndex: 0,
    explanation: "The Constitution guarantees equal representation in the Senate with two senators per state."
  },
  {
    type: "multiple_choice",
    question: "What is the minimum age requirement to be President?",
    options: ["30 years", "35 years", "40 years", "45 years"],
    correctIndex: 1,
    explanation: "Article II requires the President to be at least 35 years old."
  },
  {
    type: "multiple_choice",
    question: "Which article establishes the Judicial Branch?",
    options: ["Article I", "Article II", "Article III", "Article IV"],
    correctIndex: 2,
    explanation: "Article III establishes the Supreme Court and federal judiciary."
  },
  {
    type: "multiple_choice",
    question: "How many amendments are in the Bill of Rights?",
    options: ["5", "10", "15", "27"],
    correctIndex: 1,
    explanation: "The first 10 amendments comprise the Bill of Rights."
  },
  {
    type: "multiple_choice",
    question: "What fraction of Congress is needed to override a presidential veto?",
    options: ["Simple majority", "Three-fifths", "Two-thirds", "Three-fourths"],
    correctIndex: 2,
    explanation: "Article I requires a two-thirds vote in both houses to override a veto."
  },
  {
    type: "true_false",
    question: "The President has the power to declare war.",
    options: ["True", "False"],
    correctIndex: 1,
    explanation: "Only Congress has the power to declare war, as stated in Article I."
  },
  {
    type: "multiple_choice",
    question: "How long is a term for a U.S. Senator?",
    options: ["2 years", "4 years", "6 years", "8 years"],
    correctIndex: 2,
    explanation: "Senators serve six-year terms as specified in Article I."
  },
  {
    type: "multiple_choice",
    question: "What is required to amend the Constitution?",
    options: ["Majority vote in Congress", "Two-thirds of both houses and three-fourths of states", "Presidential approval", "Supreme Court ruling"],
    correctIndex: 1,
    explanation: "Article V requires proposal by 2/3 of Congress and ratification by 3/4 of states."
  }
];

const ConstitutionCompass = () => {
  const [page, setPage] = useState('landing');
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [showResult, setShowResult] = useState(false);
  const [questions, setQuestions] = useState([]);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [changelogOpen, setChangelogOpen] = useState(false);
  const [changelog, setChangelog] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  
  // Setup screen state
  const [useAI, setUseAI] = useState(true);
  const [difficulty, setDifficulty] = useState('medium');
  const [topic, setTopic] = useState('All Topics');

  const topics = [
    'All Topics',
    'Bill of Rights (Amendments 1-10)',
    'Articles (I, II, III - Three Branches)',
    'Amendments (11-27)',
    'Federalism & States',
    'Rights & Freedoms',
    'Checks & Balances'
  ];

  useEffect(() => {
    // Load preferences from localStorage
    const savedUseAI = localStorage.getItem('useAI');
    const savedDifficulty = localStorage.getItem('difficulty');
    const savedTopic = localStorage.getItem('topic');
    
    if (savedUseAI !== null) setUseAI(savedUseAI === 'true');
    if (savedDifficulty) setDifficulty(savedDifficulty);
    if (savedTopic) setTopic(savedTopic);

    // Fetch changelog
    fetch('/CHANGELOG.md')
      .then(response => response.text())
      .then(text => setChangelog(text))
      .catch(err => console.error('Error loading changelog:', err));
  }, []);

  const savePreferences = () => {
    localStorage.setItem('useAI', useAI.toString());
    localStorage.setItem('difficulty', difficulty);
    localStorage.setItem('topic', topic);
  };

  const generateAIQuestions = async () => {
    setLoading(true);
    setError('');
    
    try {
      const response = await fetch('/api/generate-questions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ difficulty, topic }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate questions');
      }

      const data = await response.json();
      setQuestions(data.questions);
      setPage('quiz');
    } catch (err) {
      console.error('Error generating questions:', err);
      setError('Unable to generate AI questions. Would you like to try the hardcoded quiz instead?');
    } finally {
      setLoading(false);
    }
  };

  const startNewQuiz = useCallback(() => {
    savePreferences();
    
    if (useAI) {
      generateAIQuestions();
    } else {
      // Use hardcoded questions
      const shuffled = [...allQuestions].sort(() => Math.random() - 0.5);
      setQuestions(shuffled.slice(0, 10));
      setCurrentQuestion(0);
      setScore(0);
      setSelectedAnswer(null);
      setShowResult(false);
      setPage('quiz');
    }
  }, [useAI, difficulty, topic]);

  const startHardcodedQuiz = () => {
    const shuffled = [...allQuestions].sort(() => Math.random() - 0.5);
    setQuestions(shuffled.slice(0, 10));
    setCurrentQuestion(0);
    setScore(0);
    setSelectedAnswer(null);
    setShowResult(false);
    setError('');
    setPage('quiz');
  };

  const handleAnswer = (index) => {
    if (showResult) return;
    
    setSelectedAnswer(index);
    setShowResult(true);
    
    if (index === questions[currentQuestion].correctIndex) {
      setScore(score + 1);
    }
  };

  const handleNext = () => {
    if (currentQuestion < 9) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer(null);
      setShowResult(false);
    } else {
      setPage('complete');
    }
  };

  const resetToLanding = () => {
    setPage('landing');
    setCurrentQuestion(0);
    setScore(0);
    setSelectedAnswer(null);
    setShowResult(false);
    setQuestions([]);
    setError('');
  };

  // Navigation Component
  const Navigation = () => (
    <nav className="bg-white shadow-md fixed w-full top-0 z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          <button 
            onClick={() => setPage('landing')}
            className="flex items-center gap-2 text-xl font-bold text-indigo-900 hover:text-indigo-700 transition"
          >
            <span className="text-2xl">📜</span>
            <span className="hidden sm:inline">Constitution Compass</span>
            <span className="sm:hidden">CC</span>
          </button>
          
          <div className="hidden md:flex items-center gap-6">
            <button 
              onClick={() => setPage('landing')}
              className={`font-semibold transition ${page === 'landing' ? 'text-indigo-600' : 'text-gray-700 hover:text-indigo-600'}`}
            >
              Home
            </button>
            <button 
              onClick={() => setPage('about')}
              className={`font-semibold transition ${page === 'about' ? 'text-indigo-600' : 'text-gray-700 hover:text-indigo-600'}`}
            >
              About
            </button>
            <button
              onClick={() => setPage('setup')}
              className="bg-indigo-600 text-white px-4 py-2 rounded-lg font-semibold hover:bg-indigo-700 transition"
            >
              Start Quiz
            </button>
          </div>

          <button
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
            className="md:hidden p-2 rounded-lg hover:bg-gray-100"
          >
            {mobileMenuOpen ? <X size={24} /> : <Menu size={24} />}
          </button>
        </div>

        {mobileMenuOpen && (
          <div className="md:hidden py-4 border-t">
            <div className="flex flex-col gap-3">
              <button 
                onClick={() => { setPage('landing'); setMobileMenuOpen(false); }}
                className="text-left px-4 py-2 rounded hover:bg-gray-100 font-semibold"
              >
                Home
              </button>
              <button 
                onClick={() => { setPage('about'); setMobileMenuOpen(false); }}
                className="text-left px-4 py-2 rounded hover:bg-gray-100 font-semibold"
              >
                About
              </button>
              <button
                onClick={() => { setPage('setup'); setMobileMenuOpen(false); }}
                className="mx-4 bg-indigo-600 text-white px-4 py-2 rounded-lg font-semibold hover:bg-indigo-700"
              >
                Start Quiz
              </button>
            </div>
          </div>
        )}
      </div>
    </nav>
  );

  // Footer Component
  const Footer = () => (
    <div className="mt-6 pt-4 border-t border-gray-200">
      <div className="flex flex-wrap justify-center items-center gap-4 text-sm">
        <a 
          href="https://amzn.to/3IMOCH6" 
          target="_blank" 
          rel="noopener noreferrer"
          className="flex items-center gap-1 text-indigo-700 hover:text-indigo-900 font-semibold"
        >
          <span>📜</span>
          <span>Get a Pocket Constitution!</span>
          <span className="text-xs text-gray-500">(affiliate)</span>
        </a>
        <span className="text-gray-300">|</span>
        <a 
          href="https://buymeacoffee.com/ericmckenna" 
          target="_blank" 
          rel="noopener noreferrer"
          className="flex items-center gap-1 text-amber-700 hover:text-amber-900 font-semibold"
        >
          <span>☕</span>
          <span>Buy me a coffee</span>
        </a>
      </div>
    </div>
  );

  // Setup Page
  if (page === 'setup') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
        <Navigation />
        <div className="min-h-screen flex items-center justify-center p-4 pt-20">
          <div className="bg-white rounded-lg shadow-xl p-8 max-w-2xl w-full">
            <h2 className="text-3xl font-bold text-indigo-900 mb-6 text-center">Customize Your Quiz</h2>
            
            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                <p className="text-red-900 mb-3">{error}</p>
                <button
                  onClick={startHardcodedQuiz}
                  className="w-full bg-indigo-600 text-white py-2 rounded-lg font-semibold hover:bg-indigo-700 transition"
                >
                  Use Hardcoded Quiz
                </button>
              </div>
            )}

            {/* AI Toggle */}
            <div className="mb-6">
              <label className="block text-sm font-semibold text-gray-700 mb-3">Quiz Mode</label>
              <div className="flex gap-3">
                <button
                  onClick={() => setUseAI(true)}
                  className={`flex-1 py-3 px-4 rounded-lg font-semibold transition flex items-center justify-center gap-2 ${
                    useAI 
                      ? 'bg-indigo-600 text-white' 
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  <Zap size={20} />
                  AI Generated
                </button>
                <button
                  onClick={() => setUseAI(false)}
                  className={`flex-1 py-3 px-4 rounded-lg font-semibold transition flex items-center justify-center gap-2 ${
                    !useAI 
                      ? 'bg-indigo-600 text-white' 
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  <BookOpen size={20} />
                  Hardcoded
                </button>
              </div>
            </div>

            {/* Difficulty Selection */}
            <div className="mb-6">
              <label className="block text-sm font-semibold text-gray-700 mb-3">Difficulty Level</label>
              <div className="grid grid-cols-3 gap-3">
                {['easy', 'medium', 'hard'].map((level) => (
                  <button
                    key={level}
                    onClick={() => setDifficulty(level)}
                    disabled={!useAI}
                    className={`py-3 px-4 rounded-lg font-semibold transition ${
                      difficulty === level && useAI
                        ? 'bg-indigo-600 text-white'
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    } ${!useAI ? 'opacity-50 cursor-not-allowed' : ''}`}
                  >
                    {level.charAt(0).toUpperCase() + level.slice(1)}
                  </button>
                ))}
              </div>
            </div>

            {/* Topic Selection */}
            <div className="mb-6">
              <label className="block text-sm font-semibold text-gray-700 mb-3">Topic Focus</label>
              <select
                value={topic}
                onChange={(e) => setTopic(e.target.value)}
                disabled={!useAI}
                className={`w-full p-3 border-2 border-gray-200 rounded-lg focus:border-indigo-500 focus:outline-none ${
                  !useAI ? 'opacity-50 cursor-not-allowed bg-gray-50' : ''
                }`}
              >
                {topics.map((t) => (
                  <option key={t} value={t}>{t}</option>
                ))}
              </select>
            </div>

            {useAI && (
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-6 text-sm text-blue-900">
                ✨ AI will generate unique questions based on your selections
              </div>
            )}

            <button
              onClick={startNewQuiz}
              disabled={loading}
              className="w-full bg-indigo-600 text-white py-4 rounded-lg font-bold text-lg hover:bg-indigo-700 transition disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              {loading ? (
                <>
                  <Loader className="animate-spin" size={20} />
                  Generating Questions...
                </>
              ) : (
                <>
                  Start Quiz →
                </>
              )}
            </button>

            <Footer />
          </div>
        </div>
      </div>
    );
  }

  // About Page
  if (page === 'about') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
        <Navigation />
        <div className="pt-24 pb-12 px-4">
          <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-xl p-8">
            <h1 className="text-4xl font-bold text-indigo-900 mb-6">About Constitution Compass</h1>
            
            <div className="prose prose-indigo max-w-none">
              <h2 className="text-2xl font-semibold text-indigo-800 mt-8 mb-4">What is this?</h2>
              <p className="text-gray-700 leading-relaxed mb-4">
                Constitution Compass is an interactive quiz application designed to test and improve your knowledge of the United States Constitution. Whether you're a student, educator, or civically engaged citizen, this tool makes learning about our founding document engaging and accessible.
              </p>

              <h2 className="text-2xl font-semibold text-indigo-800 mt-8 mb-4">Built with AI</h2>
              <p className="text-gray-700 leading-relaxed mb-4">
                This application was built using <strong>Claude AI</strong> (Anthropic's large language model) as a development partner. The entire codebase, from the React components to the Tailwind styling, was created through an iterative conversation with Claude, demonstrating how AI can accelerate modern web development.
              </p>

              <h2 className="text-2xl font-semibold text-indigo-800 mt-8 mb-4">Technology Stack</h2>
              <ul className="list-disc list-inside text-gray-700 space-y-2 mb-4">
                <li><strong>Node.js 22</strong> - Runtime environment</li>
                <li><strong>React 18</strong> - Modern UI framework</li>
                <li><strong>Tailwind CSS</strong> - Utility-first styling</li>
                <li><strong>Lucide React</strong> - Beautiful icon library</li>
                <li><strong>Vercel</strong> - Deployment and hosting</li>
                <li><strong>GitHub Actions</strong> - CI/CD with tag-based deployments</li>
                <li><strong>Google Gemini API</strong> - AI-powered question generation</li>
                <li><strong>Claude AI</strong> - Development assistance</li>
              </ul>

              <h2 className="text-2xl font-semibold text-indigo-800 mt-8 mb-4">Open Source</h2>
              <p className="text-gray-700 leading-relaxed mb-4">
                While the repository is currently private, I'm open to sharing the code with fellow developers interested in learning how this was built or contributing to the project. If you're interested in seeing the source code or discussing the development process, feel free to reach out!
              </p>

              <div className="bg-indigo-50 border-l-4 border-indigo-600 p-4 my-6">
                <p className="text-indigo-900 font-semibold mb-3">Want to collaborate or learn more?</p>
                <p className="text-indigo-800 text-sm mb-4">Connect with me to discuss the project or request repository access:</p>
                <div className="flex flex-wrap gap-3">
                  <a
                    href="https://www.linkedin.com/in/ericmckenna/"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg font-semibold hover:bg-blue-700 transition"
                  >
                    <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                    </svg>
                    LinkedIn
                  </a>
                  <a
                    href="https://github.com/emckenna"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center gap-2 bg-gray-800 text-white px-4 py-2 rounded-lg font-semibold hover:bg-gray-900 transition"
                  >
                    <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                    </svg>
                    GitHub
                  </a>
                </div>
              </div>

              <h2 className="text-2xl font-semibold text-indigo-800 mt-8 mb-4">Features</h2>
              <ul className="list-disc list-inside text-gray-700 space-y-2 mb-4">
                <li>AI-generated questions using Google Gemini API</li>
                <li>Customizable difficulty levels (Easy, Medium, Hard)</li>
                <li>Topic-specific quizzes covering all aspects of the Constitution</li>
                <li>Mix of multiple choice and true/false questions</li>
                <li>Detailed explanations for each answer</li>
                <li>Fallback to hardcoded questions if AI is unavailable</li>
                <li>Remembers your quiz preferences</li>
              </ul>
            </div>

            <div className="mt-12 border-t pt-8">
              <button
                onClick={() => setChangelogOpen(!changelogOpen)}
                className="flex items-center justify-between w-full text-left"
              >
                <h2 className="text-2xl font-semibold text-indigo-800">Changelog</h2>
                {changelogOpen ? <ChevronUp size={24} /> : <ChevronDown size={24} />}
              </button>
              
              {changelogOpen && (
                <div className="mt-4 bg-gray-50 rounded-lg p-6 overflow-auto max-h-96">
                  <pre className="text-sm text-gray-700 whitespace-pre-wrap font-mono leading-relaxed">
                    {changelog || 'Loading changelog...'}
                  </pre>
                </div>
              )}
            </div>

            <Footer />
          </div>
        </div>
      </div>
    );
  }

  // Landing Page
  if (page === 'landing') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
        <Navigation />
        <div className="min-h-screen flex items-center justify-center p-4 pt-24 relative overflow-hidden">
          <div className="absolute top-0 right-0 w-96 h-96 bg-white opacity-10 rounded-full -mr-48 -mt-48"></div>
          <div className="absolute bottom-0 left-0 w-[500px] h-[500px] bg-white opacity-10 rounded-full -ml-64 -mb-64"></div>
          
          <div className="relative z-10 text-center max-w-4xl">
            <div className="text-6xl mb-12">🦅</div>
            <div className="text-9xl mb-12 animate-bounce">📜</div>
            
            <h1 className="text-7xl font-extrabold text-indigo-900 mb-6 leading-tight">
              Constitution<br />Compass
            </h1>
            
            <div className="text-4xl font-semibold text-indigo-700 mb-8">
              Test Your Knowledge
            </div>
            
            <p className="text-2xl text-indigo-800 mb-12 max-w-2xl mx-auto">
              Interactive quiz on the U.S. Constitution
            </p>
            
            <div className="inline-block bg-white bg-opacity-90 px-8 py-4 rounded-full text-xl font-semibold text-indigo-700 mb-12 shadow-lg">
              🎓 AI-Powered Questions • Customizable Difficulty
            </div>
            
            <div>
              <button
                onClick={() => setPage('setup')}
                className="bg-indigo-600 text-white px-12 py-6 rounded-2xl text-2xl font-bold hover:bg-indigo-700 transform hover:scale-105 transition-all duration-200 shadow-2xl"
              >
                Start Quiz →
              </button>
            </div>
            
            <div className="mt-16">
              <Footer />
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Complete Page
  if (page === 'complete') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
        <Navigation />
        <div className="min-h-screen flex items-center justify-center p-4 pt-20">
          <div className="bg-white rounded-lg shadow-xl p-8 max-w-md w-full">
            <h2 className="text-3xl font-bold text-center text-indigo-900 mb-6">Quiz Complete!</h2>
            <div className="text-center mb-8">
              <div className="text-6xl font-bold text-indigo-600 mb-2">{score}/10</div>
              <p className="text-xl text-gray-600">
                {score >= 9 ? "Constitutional Scholar! 🎓" :
                 score >= 7 ? "Well Done! 📚" :
                 score >= 5 ? "Good Effort! 📖" :
                 "Keep Studying! 📝"}
              </p>
            </div>
            
            <div className="mb-6 text-center">
              <p className="text-sm text-gray-600 mb-3">Enjoyed the quiz? Support this project!</p>
              <a 
                href="https://buymeacoffee.com/ericmckenna" 
                target="_blank" 
                rel="noopener noreferrer"
                className="inline-block"
              >
                <img 
                  src="/coffee-qr.png" 
                  alt="Buy Me a Coffee QR Code"
                  className="w-40 h-40 mx-auto border-2 border-amber-200 rounded-lg p-2 hover:border-amber-400 transition"
                  onError={(e) => {
                    e.target.style.display = 'none';
                    e.target.nextSibling.style.display = 'block';
                  }}
                />
                <div style={{ display: 'none' }} className="bg-amber-50 border-2 border-amber-200 rounded-lg p-4">
                  <p className="text-amber-900 font-semibold">☕ Buy me a coffee</p>
                  <p className="text-xs text-amber-700 mt-1">Scan QR or click to support</p>
                </div>
              </a>
            </div>

            <div className="space-y-3">
              <button
                onClick={() => setPage('setup')}
                className="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold hover:bg-indigo-700 transition flex items-center justify-center gap-2"
              >
                <RefreshCw size={20} />
                Take Another Quiz
              </button>
              
              <button
                onClick={resetToLanding}
                className="w-full bg-gray-100 text-gray-700 py-3 rounded-lg font-semibold hover:bg-gray-200 transition"
              >
                ← Back to Home
              </button>
            </div>
            
            <Footer />
          </div>
        </div>
      </div>
    );
  }

  // Quiz Page
  const currentQ = questions[currentQuestion];

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <Navigation />
      <div className="min-h-screen flex items-center justify-center p-4 pt-20">
        <div className="bg-white rounded-lg shadow-xl p-8 max-w-2xl w-full">
          <div className="mb-6">
            <div className="flex justify-between items-center mb-4">
              <span className="text-sm font-semibold text-indigo-600">
                Question {currentQuestion + 1} of 10
              </span>
              <span className="text-sm font-semibold text-gray-600">
                Score: {score}/{currentQuestion + (showResult ? 1 : 0)}
              </span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div
                className="bg-indigo-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${((currentQuestion + 1) / 10) * 100}%` }}
              ></div>
            </div>
          </div>

          <div className="mb-2">
            <span className="text-xs font-semibold text-gray-500 uppercase">
              {currentQ.type === 'true_false' ? 'True/False' : 'Multiple Choice'}
            </span>
          </div>

          <h2 className="text-2xl font-bold text-gray-800 mb-6">{currentQ.question}</h2>

          <div className="space-y-3 mb-6">
            {currentQ.options.map((option, index) => {
              const isCorrect = index === currentQ.correctIndex;
              const isSelected = index === selectedAnswer;
              
              let bgColor = "bg-gray-50 hover:bg-gray-100";
              let borderColor = "border-gray-200";
              let icon = null;

              if (showResult) {
                if (isCorrect) {
                  bgColor = "bg-green-50";
                  borderColor = "border-green-500";
                  icon = <CheckCircle className="text-green-500" size={24} />;
                } else if (isSelected) {
                  bgColor = "bg-red-50";
                  borderColor = "border-red-500";
                  icon = <XCircle className="text-red-500" size={24} />;
                }
              }

              return (
                <button
                  key={index}
                  onClick={() => handleAnswer(index)}
                  disabled={showResult}
                  className={`w-full p-4 text-left rounded-lg border-2 ${borderColor} ${bgColor} transition-all flex items-center justify-between ${
                    !showResult ? 'cursor-pointer' : 'cursor-default'
                  }`}
                >
                  <span className="font-medium text-gray-800">{option}</span>
                  {icon}
                </button>
              );
            })}
          </div>

          {showResult && currentQ.explanation && (
            <div className="bg-blue-50 border-l-4 border-blue-500 p-4 mb-6">
              <p className="text-sm font-semibold text-blue-900 mb-1">Explanation:</p>
              <p className="text-sm text-blue-800">{currentQ.explanation}</p>
            </div>
          )}

          {showResult && (
            <div className="mt-6">
              <button
                onClick={handleNext}
                className="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold hover:bg-indigo-700 transition"
              >
                {currentQuestion < 9 ? 'Next Question' : 'See Results'}
              </button>
            </div>
          )}

          <Footer />
        </div>
      </div>
    </div>
  );
};

export default ConstitutionCompass;
